# parameters
nc: 2  # coco 数据集中包含 80 个类别所以此处为 80   目标类别的个数
depth_multiple: 0.33  # yolov5l 模型中的系数为 1 # 控制模型中 C3 模块的串联个数的系数
width_multiple: 0.50  # 控制模型中通道大小的系数

# anchors 此处为预先设置的三组不同尺寸的锚框
# 经过越多倍数的下采样，感受野也越大，也越容易识别尺寸较大的物体
# 所以高倍数下采样时的锚框相对更大
anchors:
  - [10,13, 16,30, 33,23]  			# 8倍下采样的锚框
  - [30,61, 62,45, 59,119]  		# 16倍下采样的锚框
  - [116,90, 156,198, 373,326]  	# 32倍下采样的锚框

# YOLOv5 backbone
backbone:   #  模型 backbone 部分的结构
  # 参数分别表示
  # 第0个：传入的特征源于第几次 -1 表示为上一层
  # 第1个：该模块重复使用几次
  # 当模块为 C3 或 BottleneckCSP 时，作为内部的 Bottleneck 数量传入
  # 第2个：模块的类名
  # 第3个：生成模块所用的参数 其中通道数由 width_multiple 系数决定
 [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]

# YOLOv5 head
head:   # 模型 head 部分的结构
 [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
